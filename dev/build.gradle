/*
 * Group name
 */
group 'ch.unibas.dmi.dbis'
/*
 * The version is read
 */
version = readVersion()
/*
 * Adding a description
 */
description ="""
short description

Project name: ${project.name}

brief(er) description
"""

/*
 * Adds default tasks related to java projects
 */
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.6'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/**
 * Increments the specified versionPart in the version.properties file.
 * This increments the specified versionPart in the version.properties file by 1
 *
 * Allowed versionParts are: MajorVersion, MinorVersion, FixVersion, BuildNumber
 * The versionParts following the pattern *Version are under the Apache Versioning rules.
 *
 * The BuildNumber is incremented whenever the project is built.
 *
 * @param versionPart The versionPart to increment: Either MajorVersion, MinorVersion, FixVersion or BuildNumber
 */
static void incrementVersion(String versionPart){
    String vKey = "artifact${versionPart}"
    Properties p = new Properties()
    File pF = new File('version.properties')
    p.load(pF.newDataInputStream() )
    Integer version = (p.getProperty(vKey) as Integer)
    Integer nextVersion = version + 1
    p.setProperty(vKey, nextVersion.toString() )
    p.store(pF.newWriter(), null)
    p.load(pF.newDataInputStream() )
}

task incrementMajorVersion{
    group = 'versioning'
    description = 'Increments the majro version (so the M in M.m.F) number by 1. Only invoke when a major version update is appropriate.'
    doFirst{
        incrementVersion('MajorVersion')
    }
}

task incrementMinorVersion{
    group = 'versioning'
    description = 'Increments the minor version (so the m in M.m.F) number by 1. Only invoke when a minor version update is appropriate.'
    doFirst{
        incrementVersion('MinorVersion')
    }
}

task incrementFixVersion{
    group = 'versioning'
    description = 'Increments the fix version (so the F in  M.m.F) number by 1. Only invoke when a bugfix is applied.'
    doFirst{
        incrementVersion('FixVersion')
    }
}

task incrementBuildNumber(){
    group = 'versioning'
    description = 'Increments the build number by 1. Will be invoked right after build.'
    doLast{
        incrementVersion('BuildNumber')
    }
}

build.doLast{
    incrementVersion('BuildNumber')
}

task incrementTest {
    doLast{
        Properties p = new Properties()
        File pF = new File('version.properties')
        p.load(pF.newDataInputStream() )
        Integer fix = (p.getProperty('artifactFixVersion') as Integer)
        logger.debug('fix version: '+fix.toString() )
        Integer nextFix = fix + 1
        logger.debug('next fix version: '+nextFix.toString() )
        p.setProperty('artifactFixVersion', nextFix.toString() )
        p.store(pF.newWriter(), null)
        p.load(pF.newDataInputStream() )
    }
}

/**
 * Reads the version.properties file with its artifact version numbers and concatenats these numbers
 * to the version in format M.m.F-bB where M is the artifactMajorVersion, m is the artifactMinorVersion
 * F is the artifactFixVersion and B is the artifactBuildNumber.
 * The versioning follows the Appache Versioning rules.
 * @return The read version
 */
static String readVersion(){
    Properties p = new Properties()
    File f = new File('version.properties')
    p.load(f.newDataInputStream() )
    Integer build = (p.getProperty('artifactBuildNumber') as Integer)
    Integer fix = (p.getProperty('artifactFixVersion') as Integer)
    Integer minor = (p.getProperty('artifactMinorVersion') as Integer)
    Integer major = (p.getProperty('artifactMajorVersion') as Integer)
    return major.toString()+'.'+minor+'.'+fix+'-b'+build.toString()
}

/**
 * Reads the version.properties file with its artifact version numbers and then creats the version string
 * with respect to that file's content.
 */
task setupVersion{
    group = 'versioning'
    description  = 'Reads the version from version.properties file and sets the projects version as that read version.'
    doFirst{
        String v = readVersion()
        setVersion(v)
    }
}